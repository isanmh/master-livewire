# cara install laravel livewire :
composer require livewire/livewire
php artisan livewire:publish --config

# create component laravel livewire :
php artisan make:livewire nama-component
php artisan make:livewire LandingPage

# check & create component layouts :
php artisan livewire:layout
- CLASS: resources/views/components/layouts/app.blade.php

# tambahkan livewire styles :
@livewireStyles
@livewireScripts
    atau
@stack(styles)
@stack(scripts)

# view push live wire :
@push(styles)
    @livewireStyles
@endpush

@push(scripts)
    @livewireScripts
@endpush

# untuk navigasi :
wire:navigate

# title dinamis :
#[Title('About Page')] > pada component file
<title>{{ $title }}</title>

# pemnggilan component :
<livewire:component-name />

# handle click event :
wire:click="method"
wire:submit.prevent="method"

# laravel ui bootstrap :
composer require laravel/ui
php artisan ui bootstrap --auth
npm install && npm run dev

# Dashboard component :
php artisan make:livewire dashboard.index
php artisan make:livewire auth.login

# delete component :
php artisan livewire:delete NavbarTop

# membuat database seed & factory :
php artisan make:seeder CategorySeeder
php artisan make:factory CategoryFactory
php artisan make:seeder ProductSeeder
php artisan make:factory ProductFactory

# Jalankan seeder :
php artisan db:seed --class=CategorySeeder
php artisan db:seed --class=ProductSeeder

# cara membuat Foregn Key Category > Product :
$table->unsignedBigInteger('category_id');
$table->foreign('category_id')->references('id')->on('categories');

$table->foreignId('category_id')->constrained()->onDelete('cascade');

Categoty > product = hasMany (1 to many)
Product > Category = belongsTo (many to 1)

# upload file :
php artisan storage:link

# create.php
use WithFileUploads;

$this->image->storeAs('assets/images', $imageName, 'public');
unlink(storage_path('app/public/assets/images/' . $this->product->image));

# view :
<div wire:loading wire:target='image' class="mt-2">
    <span class="text-success">
        {{-- icon bi loading --}}
        <i class="bi bi-arrow-clockwise"></i>
        uploading...
    </span>
</div>

{{-- image temporary --}}
@if ($image)
    <div class="col-sm-10 mt-2">
        <img src="{{ $image->temporaryUrl() }}" width="100">
    </div>
@endif

#search live wire :
use WithPagination;

// updating+Search
public function updatingSearch()
{
    // $this->resetPage();
    $this->gotoPage(1);
}

# wire:model.live.debounce.1000ms
<div class="d-flex col-md-8 col-sm-6">
    <input wire:model.live.debounce.1000ms="search" type="text"
        class="form-control form-control-sm" placeholder="Search">
</div>

============JWT AUTH==========
Cara membuat JWT Auth :
1. composer require tymon/jwt-auth
2. php artisan vendor:publish --provider="Tymon\JWTAuth\Providers\LaravelServiceProvider"
3. php artisan jwt:secret
4. tambahkan di .env :
JWT_SECRET=secret
5. tambahkan di config/app.php :
'providers' => [
    ...
    Tymon\JWTAuth\Providers\LaravelServiceProvider::class,
],
'aliases' => [
    ...
    'JWTAuth' => Tymon\JWTAuth\Facades\JWTAuth::class,
    'JWTFactory' => Tymon\JWTAuth\Facades\JWTFactory::class,
],

======Custom Header=========
cara membuat middleware :
php artisan make:middleware CustomHeader

- masuk kernel.php :
protected $routeMiddleware = [
    ...
    'snap-bi' => \App\Http\Middleware\CustomHeader::class,
];

- setting AuthController Header:
public const Header = [
        'X-PARTNER-ID' => 'INIXINDO',
        'X-TIMESTAMP' => '2024-10-02',
        'X-SIGNATURE' => '123456'
];

- setting di CustomHeader.php :
public function handle(Request $request, Closure $next): Response
    {
        // custom header
        $ah = AuthController::Header;
        $res1 = $request->header('X-PARTNER-ID');
        $res2 = $request->header('X-TIMESTAMP');
        $res3 = $request->header('X-SIGNATURE');

        // logika header custom
        if (
            $res1 === $ah['X-PARTNER-ID']
            && $res2 === $ah['X-TIMESTAMP']
            && $res3 === $ah['X-SIGNATURE']
        ) {
            return $next($request);
        } else {
            // jika salah satu header tidak sesuai
            return response()->json([
                'status' => 503,
                'message' => 'Silahkan cek kembali header custom Anda',
            ], 503);
        }
    }

- setting route :
Route::get('/test-api', function () {
    return response()->json([
        'status' => 200,
        'message' => 'Hai, ini adalah test API',
    ]);
})->middleware(['auth:api', 'snap-bi']);

4. Install Laravel Octane :
composer require laravel/octane
php artisan octane:install
php artisan octane:start

5. install pest laravel :
composer remove phpunit/phpunit
composer require pestphp/pest --dev --with-all-dependencies

./vendor/bin/pest --init
./vendor/bin/pest

composer require pestphp/pest-plugin-stressless --dev

stress test :
./vendor/bin/pest stress pestphp.com
./vendor/bin/pest stress http://127.0.0.1:8000
./vendor/bin/pest stress http://127.0.0.1:8000 --concurrency=2
./vendor/bin/pest stress http://127.0.0.1:8000 --concurrency=10 --requests=100
